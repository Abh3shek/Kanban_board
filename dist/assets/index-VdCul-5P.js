(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))r(e);new MutationObserver(e=>{for(const i of e)if(i.type==="childList")for(const n of i.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&r(n)}).observe(document,{childList:!0,subtree:!0});function s(e){const i={};return e.integrity&&(i.integrity=e.integrity),e.referrerPolicy&&(i.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?i.credentials="include":e.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function r(e){if(e.ep)return;e.ep=!0;const i=s(e);fetch(e.href,i)}})();class m{constructor(t,s,r,e){this.id=Date.now(),this.title=t,this.description=s,this.parentListId=r,this.onDelete=e}static fromJSON(t,s){const r=new m(t.title,t.description,t.parentListId,s);return r.id=t.id,r}render(t){const s=document.createElement("div");s.classList.add("card"),s.setAttribute("draggable",!0),s.dataset.cardId=this.id,s.addEventListener("dragstart",n=>{n.dataTransfer.setData("text/plain",this.id)});const r=document.createElement("h4");r.textContent=this.title;const e=document.createElement("p");e.textContent=this.description;const i=document.createElement("button");i.classList.add("delete-card-btn"),i.innerHTML=`
  <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 0 24 24" width="20">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-4.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"/>
  </svg>
`,i.addEventListener("click",()=>{t.removeChild(s),this.onDelete(this.id),this.removeFromParent()}),s.append(r,e,i),t.appendChild(s)}removeFromParent(){console.log(`Card ${this.id} should remove itself from parent list ${this.parentListId}`)}toJSON(){return{id:this.id,title:this.title,description:this.description,parentListId:this.parentListId}}}class f{constructor(t,s,r){this.id=Date.now(),this.title=t,this.cards=[],this.onSave=s,this.onDelete=r}static fromJSON(t,s,r){const e=new f(t.title,s,r);return e.id=t.id,e.cards=t.cards.map(i=>m.fromJSON(i,n=>{e.cards=e.cards.filter(o=>o.id!==n),e.onSave()})),e}render(t){const s=document.createElement("div");s.classList.add("list");const r=document.createElement("h3");r.textContent=this.title;const e=document.createElement("div");e.classList.add("list-header"),this.cardsContainer=document.createElement("div"),this.cardsContainer.classList.add("cards-container"),this.cards.forEach(o=>o.render(this.cardsContainer)),s.addEventListener("dragover",o=>{o.preventDefault()}),s.addEventListener("drop",o=>{o.preventDefault();const d=o.dataTransfer.getData("text/plain");if(!d){console.warn("No card ID found in dataTransfer");return}console.log("📦 Dropped card ID:",d);const l=window.board;if(!l){console.error("❌ Board not found on window");return}let a=null,c=null;for(const h of l.lists){const u=h.cards.find(w=>w.id==d);if(u){a=h,c=u;break}}if(!c){console.warn("❌ No card found with ID",d);return}if(!a){console.warn("❌ Source list not found");return}if(console.log("✅ Found dragged card:",c),console.log("📍 Source List ID:",a.id),console.log("📍 Target List ID:",this.id),a.id===this.id){console.log("⚠️ Card dropped in the same list. Ignoring.");return}a.cards=a.cards.filter(h=>h.id!=d);const g=a.cardsContainer.querySelector(`[data-card-id="${d}"]`);g&&a.cardsContainer.removeChild(g),console.log("🧹 Removed card from source list"),c.parentListId=this.id,c.onDelete=h=>{this.cards=this.cards.filter(u=>u.id!==h),this.onSave()},this.cards.push(c),c.render(this.cardsContainer),console.log("📥 Moved & rendered in new list"),this.onSave()});const i=document.createElement("button");i.classList.add("add-card-btn"),i.innerHTML=`
  <svg class="plus-icon" xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor" viewBox="0 0 16 16">
    <path d="M8 4a.5.5 0 0 1 .5.5V7.5H11a.5.5 0 0 1 0 1H8.5V11a.5.5 0 0 1-1 0V8.5H5a.5.5 0 0 1 0-1h2.5V4.5A.5.5 0 0 1 8 4z"/>
  </svg> Add Card
`,i.addEventListener("click",()=>{const o=prompt("Enter card title"),d=prompt("Enter card description"),l=new m(o,d,this.id,a=>{this.cards=this.cards.filter(c=>c.id!==a),this.onSave()});this.cards.push(l),l.render(this.cardsContainer),this.onSave()});const n=document.createElement("button");n.classList.add("delete-list-btn"),n.innerHTML=`
  <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 0 24 24" width="20">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-4.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"/>
  </svg>
`,n.addEventListener("click",()=>{t.removeChild(s),this.onDelete(this.id)}),e.appendChild(r),e.appendChild(n),s.append(e,this.cardsContainer,i),t.appendChild(s)}toJSON(){return{id:this.id,title:this.title,cards:this.cards.map(t=>t.toJSON())}}}class p{constructor(t){this.title=t,this.lists=[]}static fromJSON(t){const s=new p(t.title);return s.lists=t.lists.map(r=>f.fromJSON(r,()=>s.save(),e=>{s.lists=s.lists.filter(i=>i.id!==e),s.save()})),s}render(t){const s=document.createElement("div");s.classList.add("board");const r=document.createElement("h2");r.textContent=this.title,this.listsContainer=document.createElement("div"),this.listsContainer.classList.add("lists-container"),this.lists.forEach(n=>n.render(this.listsContainer));const e=document.createElement("button");e.classList.add("add-list-btn"),e.innerHTML=`
  <svg class="plus-icon" xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor" viewBox="0 0 16 16">
    <path d="M8 4a.5.5 0 0 1 .5.5V7.5H11a.5.5 0 0 1 0 1H8.5V11a.5.5 0 0 1-1 0V8.5H5a.5.5 0 0 1 0-1h2.5V4.5A.5.5 0 0 1 8 4z"/>
  </svg> Add List
`,e.addEventListener("click",()=>{const n=prompt("Enter list title");if(!n)return;const o=new f(n,()=>this.save(),d=>{this.lists=this.lists.filter(l=>l.id!==d),this.save()});this.lists.push(o),o.render(this.listsContainer),this.save()});const i=document.createElement("div");i.classList.add("list-section"),i.append(this.listsContainer,e),s.append(r,i),t.appendChild(s)}toJSON(){return{title:this.title,lists:this.lists.map(t=>t.toJSON())}}save(){const t=this.toJSON();localStorage.setItem("kanban",JSON.stringify(t))}}document.addEventListener("DOMContentLoaded",()=>{const v=document.querySelector("#app");let t;const s=localStorage.getItem("kanban");if(s)try{const r=JSON.parse(s);t=p.fromJSON(r),console.log("✅ Loaded board from localStorage")}catch(r){console.error("❌ Failed to parse saved board:",r),t=new p("Project Board")}else t=new p("Project Board"),console.log("🆕 Started new board");t.render(v),window.board=t});
